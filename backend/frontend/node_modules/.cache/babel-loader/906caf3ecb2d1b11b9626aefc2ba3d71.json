{"ast":null,"code":"import _slicedToArray from\"/home/adrian/DiMOP/backend/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{createContext,useState}from\"react\";// export context for state management\nexport var APIContext=createContext();// provider with managed states || add new states\n// SET USE API = TRUE IF NO DEBUGGING\nexport var APIProvider=function APIProvider(props){// use api or local json?\nvar _useState=useState(false),_useState2=_slicedToArray(_useState,2),use_API=_useState2[0],setUseAPI=_useState2[1];// set api host\nvar _useState3=useState(\"http://localhost:5000\"),_useState4=_slicedToArray(_useState3,2),API_Host=_useState4[0],setAPIHost=_useState4[1];// set user_id for initial access\nvar _useState5=useState(5),_useState6=_slicedToArray(_useState5,2),API_User=_useState6[0],setAPIUser=_useState6[1];return/*#__PURE__*/React.createElement(APIContext.Provider,{value:{use_API:[use_API,setUseAPI],API_Host:[API_Host,setAPIHost],API_User:[API_User,setAPIUser]}},props.children);};","map":{"version":3,"sources":["/home/adrian/DiMOP/backend/frontend/src/APIContext.jsx"],"names":["React","createContext","useState","APIContext","APIProvider","props","use_API","setUseAPI","API_Host","setAPIHost","API_User","setAPIUser","children"],"mappings":"sHAAA,MAAOA,CAAAA,KAAP,EAAgBC,aAAhB,CAA+BC,QAA/B,KAA+C,OAA/C,CAEA;AACA,MAAO,IAAMC,CAAAA,UAAU,CAAGF,aAAa,EAAhC,CAEP;AACA;AACA,MAAO,IAAMG,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,KAAD,CAAW,CAClC;AADkC,cAELH,QAAQ,CAAC,KAAD,CAFH,wCAE3BI,OAF2B,eAElBC,SAFkB,eAGlC;AAHkC,eAIHL,QAAQ,CAAC,uBAAD,CAJL,yCAI3BM,QAJ2B,eAIjBC,UAJiB,eAKlC;AALkC,eAMHP,QAAQ,CAAC,CAAD,CANL,yCAM3BQ,QAN2B,eAMjBC,UANiB,eAQlC,mBACI,oBAAC,UAAD,CAAY,QAAZ,EACI,KAAK,CAAE,CACHL,OAAO,CAAE,CAACA,OAAD,CAAUC,SAAV,CADN,CAEHC,QAAQ,CAAE,CAACA,QAAD,CAAWC,UAAX,CAFP,CAGHC,QAAQ,CAAE,CAACA,QAAD,CAAWC,UAAX,CAHP,CADX,EAOKN,KAAK,CAACO,QAPX,CADJ,CAWH,CAnBM","sourcesContent":["import React, { createContext, useState } from \"react\";\n\n// export context for state management\nexport const APIContext = createContext();\n\n// provider with managed states || add new states\n// SET USE API = TRUE IF NO DEBUGGING\nexport const APIProvider = (props) => {\n    // use api or local json?\n    const [use_API, setUseAPI] = useState(false);\n    // set api host\n    const [API_Host, setAPIHost] = useState(\"http://localhost:5000\");\n    // set user_id for initial access\n    const [API_User, setAPIUser] = useState(5);\n\n    return (\n        <APIContext.Provider\n            value={{\n                use_API: [use_API, setUseAPI],\n                API_Host: [API_Host, setAPIHost],\n                API_User: [API_User, setAPIUser],\n            }}\n        >\n            {props.children}\n        </APIContext.Provider>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}