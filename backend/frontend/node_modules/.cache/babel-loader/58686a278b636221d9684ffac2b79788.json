{"ast":null,"code":"var _jsxFileName = \"/home/adrian/DIMOP/dimop_frontend/src/components/Search/SearchDialog.jsx\";\nimport { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle } from \"@material-ui/core\";\nimport React, { useContext, useEffect, useRef, useState } from \"react\"; //Components\n\nimport { MainContext } from \"../../views/Main/MainContext.jsx\";\nimport { Search } from \"./Search\";\nimport Slide from \"@material-ui/core/Slide\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return /*#__PURE__*/React.createElement(Slide, Object.assign({\n    direction: \"up\",\n    ref: ref\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 10\n    }\n  }));\n});\nexport const SearchDialog = props => {\n  const descriptionElementRef = useRef(null);\n  useEffect(() => {\n    if (props.open) {\n      const {\n        current: descriptionElement\n      } = descriptionElementRef;\n\n      if (descriptionElement !== null) {\n        descriptionElement.focus();\n      }\n    }\n  }, [props.open]);\n  const {\n    selection_atomic\n  } = useContext(MainContext);\n  const [selectionAtomic, setSelectionAtomic] = selection_atomic;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Dialog, {\n    open: props.open,\n    TransitionComponent: Transition,\n    fullWidth: true,\n    maxWidth: \"lg\",\n    onClose: props.handleSearchDialogClose,\n    scroll: \"paper\",\n    \"aria-labelledby\": \"scroll-dialog-title\",\n    \"aria-describedby\": \"scroll-dialog-description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(DialogTitle, {\n    id: \"scroll-dialog-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }, \"Materialsuche\"), /*#__PURE__*/React.createElement(DialogContent, {\n    dividers: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, selectionAtomic == 1 ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Search, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 15\n    }\n  })) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    item: true,\n    xs: 12,\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 17\n    }\n  }, \"Diese Komponente ist nicht atomar. Ihr k\\xF6nnen nur Komponenten jedoch keine Rohstoffe zugeordnet werden.\")))), /*#__PURE__*/React.createElement(DialogActions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    contrainer: true,\n    item: true,\n    xs: 12,\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: props.handleSearchDialogClose,\n    style: {\n      borderColor: \"#005000\",\n      color: \"#005000\",\n      textTransform: \"none\",\n      margin: 20,\n      height: 30,\n      width: 120\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }\n  }, \"Abbrechen\")))));\n};","map":{"version":3,"sources":["/home/adrian/DIMOP/dimop_frontend/src/components/Search/SearchDialog.jsx"],"names":["Button","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","React","useContext","useEffect","useRef","useState","MainContext","Search","Slide","Grid","Typography","Transition","forwardRef","props","ref","SearchDialog","descriptionElementRef","open","current","descriptionElement","focus","selection_atomic","selectionAtomic","setSelectionAtomic","handleSearchDialogClose","borderColor","color","textTransform","margin","height","width"],"mappings":"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","sourcesContent":["import {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n} from \"@material-ui/core\";\nimport React, { useContext, useEffect, useRef, useState } from \"react\";\n//Components\nimport { MainContext } from \"../../views/Main/MainContext.jsx\";\nimport { Search } from \"./Search\";\nimport Slide from \"@material-ui/core/Slide\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nexport const SearchDialog = (props) => {\n  const descriptionElementRef = useRef(null);\n\n  useEffect(() => {\n    if (props.open) {\n      const { current: descriptionElement } = descriptionElementRef;\n      if (descriptionElement !== null) {\n        descriptionElement.focus();\n      }\n    }\n  }, [props.open]);\n\n  const { selection_atomic } = useContext(MainContext);\n  const [selectionAtomic, setSelectionAtomic] = selection_atomic;\n\n  return (\n    <div>\n      <Dialog\n        open={props.open}\n        TransitionComponent={Transition}\n        fullWidth\n        maxWidth=\"lg\"\n        onClose={props.handleSearchDialogClose}\n        scroll=\"paper\"\n        aria-labelledby=\"scroll-dialog-title\"\n        aria-describedby=\"scroll-dialog-description\"\n      >\n        <DialogTitle id=\"scroll-dialog-title\">Materialsuche</DialogTitle>\n        <DialogContent dividers>\n          {selectionAtomic == 1 ? (\n            <div>\n              <Search />\n            </div>\n          ) : (\n            <div>\n              <Grid container item xs={12} justify=\"center\">\n                <Typography>\n                  Diese Komponente ist nicht atomar. Ihr k√∂nnen nur Komponenten\n                  jedoch keine Rohstoffe zugeordnet werden.\n                </Typography>\n              </Grid>\n            </div>\n          )}\n        </DialogContent>\n        <DialogActions>\n          <Grid contrainer item xs={12} justify=\"center\">\n            <Button\n              onClick={props.handleSearchDialogClose}\n              style={{\n                borderColor: \"#005000\",\n                color: \"#005000\",\n                textTransform: \"none\",\n                margin: 20,\n                height: 30,\n                width: 120,\n              }}\n            >\n              Abbrechen\n            </Button>\n          </Grid>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}