{"ast":null,"code":"var _jsxFileName = \"/home/adrian/DIMOP/dimop_frontend/src/APIContext.jsx\";\nimport React, { createContext, useState } from \"react\"; // export context for state management\n\nexport const APIContext = createContext(); // provider with managed states || add new states\n// SET USE API = TRUE IF NO DEBUGGING\n\nexport const APIProvider = props => {\n  // use api or local json?\n  const [use_API, setUseAPI] = useState(false); // set api host\n\n  const [API_Host, setAPIHost] = useState(\"http://localhost:5000\"); // set user_id for initial access\n\n  const [API_User, setAPIUser] = useState(5);\n  return /*#__PURE__*/React.createElement(APIContext.Provider, {\n    value: {\n      use_API: [use_API, setUseAPI],\n      API_Host: [API_Host, setAPIHost],\n      API_User: [API_User, setAPIUser]\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }\n  }, props.children);\n};","map":{"version":3,"sources":["/home/adrian/DIMOP/dimop_frontend/src/APIContext.jsx"],"names":["React","createContext","useState","APIContext","APIProvider","props","use_API","setUseAPI","API_Host","setAPIHost","API_User","setAPIUser","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,QAA+C,OAA/C,C,CAEA;;AACA,OAAO,MAAMC,UAAU,GAAGF,aAAa,EAAhC,C,CAEP;AACA;;AACA,OAAO,MAAMG,WAAW,GAAIC,KAAD,IAAW;AAClC;AACA,QAAM,CAACC,OAAD,EAAUC,SAAV,IAAuBL,QAAQ,CAAC,KAAD,CAArC,CAFkC,CAGlC;;AACA,QAAM,CAACM,QAAD,EAAWC,UAAX,IAAyBP,QAAQ,CAAC,uBAAD,CAAvC,CAJkC,CAKlC;;AACA,QAAM,CAACQ,QAAD,EAAWC,UAAX,IAAyBT,QAAQ,CAAC,CAAD,CAAvC;AAEA,sBACI,oBAAC,UAAD,CAAY,QAAZ;AACI,IAAA,KAAK,EAAE;AACHI,MAAAA,OAAO,EAAE,CAACA,OAAD,EAAUC,SAAV,CADN;AAEHC,MAAAA,QAAQ,EAAE,CAACA,QAAD,EAAWC,UAAX,CAFP;AAGHC,MAAAA,QAAQ,EAAE,CAACA,QAAD,EAAWC,UAAX;AAHP,KADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOKN,KAAK,CAACO,QAPX,CADJ;AAWH,CAnBM","sourcesContent":["import React, { createContext, useState } from \"react\";\n\n// export context for state management\nexport const APIContext = createContext();\n\n// provider with managed states || add new states\n// SET USE API = TRUE IF NO DEBUGGING\nexport const APIProvider = (props) => {\n    // use api or local json?\n    const [use_API, setUseAPI] = useState(false);\n    // set api host\n    const [API_Host, setAPIHost] = useState(\"http://localhost:5000\");\n    // set user_id for initial access\n    const [API_User, setAPIUser] = useState(5);\n\n    return (\n        <APIContext.Provider\n            value={{\n                use_API: [use_API, setUseAPI],\n                API_Host: [API_Host, setAPIHost],\n                API_User: [API_User, setAPIUser],\n            }}\n        >\n            {props.children}\n        </APIContext.Provider>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}