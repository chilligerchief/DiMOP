{"ast":null,"code":"var _jsxFileName = \"/home/adrian/DIMOP/dimop_frontend/src/views/Main/CsvUploadDialog.jsx\";\nimport React from \"react\";\nimport { useContext, useState } from \"react\";\nimport * as XLSX from \"xlsx\"; //Components\n\nimport { MainContext } from \"./MainContext.jsx\"; //Material UI\n\nimport Button from \"@material-ui/core/Button\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Grid from \"@material-ui/core/Grid\";\nimport HighlightOffIcon from \"@material-ui/icons/HighlightOff\";\nimport { Typography } from \"@material-ui/core\";\nimport PublishIcon from \"@material-ui/icons/Publish\";\nimport { Grid as GridDevExpress, Table, TableHeaderRow } from \"@devexpress/dx-react-grid-material-ui\";\nimport Accordion from \"@material-ui/core/Accordion\";\nimport AccordionSummary from \"@material-ui/core/AccordionSummary\";\nimport AccordionDetails from \"@material-ui/core/AccordionDetails\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\"; // css theme\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1)\n    }\n  },\n  buttons: {\n    borderColor: \"#005000\",\n    color: \"#005000\",\n    textTransform: \"none\",\n    margin: 20,\n    height: 30,\n    width: 120\n  }\n}));\n\nconst CsvUploadDialog = () => {\n  const classes = useStyles();\n  const {\n    csv_upload_open\n  } = useContext(MainContext);\n  const [csvUploadOpen, setCsvUploadOpen] = csv_upload_open;\n  const [loaded, setLoaded] = useState(false);\n\n  const handleClickOpen = () => {\n    setCsvUploadOpen(true);\n  };\n\n  const handleClose = () => {\n    setCsvUploadOpen(false);\n  };\n\n  const [columns, setColumns] = useState([]);\n  const [data, setData] = useState([]); // process CSV data\n\n  const processData = dataString => {\n    const dataStringLines = dataString.split(/\\r\\n|\\n/);\n    const headers = dataStringLines[0].split(/,(?![^\"]*\"(?:(?:[^\"]*\"){2})*[^\"]*$)/);\n    const list = [];\n\n    for (let i = 1; i < dataStringLines.length; i++) {\n      const row = dataStringLines[i].split(/,(?![^\"]*\"(?:(?:[^\"]*\"){2})*[^\"]*$)/);\n\n      if (headers && row.length == headers.length) {\n        const obj = {};\n\n        for (let j = 0; j < headers.length; j++) {\n          let d = row[j];\n\n          if (d.length > 0) {\n            if (d[0] == '\"') d = d.substring(1, d.length - 1);\n            if (d[d.length - 1] == '\"') d = d.substring(d.length - 2, 1);\n          }\n\n          if (headers[j]) {\n            obj[headers[j]] = d;\n          }\n        } // remove the blank rows\n\n\n        if (Object.values(obj).filter(x => x).length > 0) {\n          list.push(obj);\n        }\n      }\n    } // prepare columns list from headers\n\n\n    const columns = headers.map(c => ({\n      name: c,\n      selector: c\n    }));\n    setData(list);\n    setColumns(columns);\n    setLoaded(true);\n  }; // handle file upload\n\n\n  const handleFileUpload = e => {\n    const file = e.target.files[0];\n    const reader = new FileReader();\n\n    reader.onload = evt => {\n      /* Parse data */\n      const bstr = evt.target.result;\n      const wb = XLSX.read(bstr, {\n        type: \"binary\"\n      });\n      /* Get first worksheet */\n\n      const wsname = wb.SheetNames[0];\n      const ws = wb.Sheets[wsname];\n      /* Convert array of arrays */\n\n      const data = XLSX.utils.sheet_to_csv(ws, {\n        header: 1\n      });\n      processData(data);\n    };\n\n    reader.readAsBinaryString(file);\n  };\n\n  const [exampleColumns] = useState([{\n    name: \"colName\",\n    title: \"Spaltenbezeichnung\"\n  }, {\n    name: \"colDesc\",\n    title: \"Spaltenbeschreibung\"\n  }, {\n    name: \"colContent\",\n    title: \"Spalteninhalt\"\n  }, {\n    name: \"required\",\n    title: \"Erforderlich\"\n  }]);\n  const [tableColumnExtensions] = useState([{\n    columnName: \"colName\",\n    width: 150\n  }, {\n    columnName: \"colDesc\",\n    width: 400,\n    wordWrapEnabled: true\n  }, {\n    columnName: \"colContent\",\n    width: 150\n  }, {\n    columnName: \"required\",\n    width: 100\n  }]);\n  const [requiredData, setRequiredData] = useState([{\n    colName: \"id\",\n    colDesc: \"Identifikation eine Komponente innerhalb der Stückliste\",\n    colContent: \"Integer (Ganzzahl)\",\n    required: \"Ja\"\n  }, {\n    colName: \"parent_id\",\n    colDesc: \"Zuordnung der Parentkomponente (deren id)\",\n    colContent: \"Integer (Ganzzahl)\",\n    required: \"Ja\"\n  }, {\n    colName: \"mat_desc\",\n    colDesc: \"Bezeichnung des Materials\",\n    colContent: \"String (Text)\",\n    required: \"Ja\"\n  }, {\n    colName: \"is_atomic\",\n    colDesc: \"Handelt es sich um eine Komponente der untersten Stufe? Falls ja, kann der Kompente ein Kunststoff zugeordnet werden. Falls nicht, können weitere Komponenten zugeordnet werden.\",\n    colContent: \"1 (Ja) oder 0 (Nein)\",\n    required: \"Ja\"\n  }, {\n    colName: \"weight\",\n    colDesc: \"Gewicht in g\",\n    colContent: \"Float (Gleitkommazahl)\",\n    required: \"Ja\"\n  }, {\n    colName: \"mat_rw\",\n    colDesc: \"Recycling-/Verträglichkeitswert\",\n    colContent: \"Float (Gleitkommazahl)\",\n    required: \"Nein\"\n  }, {\n    colName: \"mat_id_int\",\n    colDesc: \"Interne Materialnummer (z.B. aus ERP-System)\",\n    colContent: \"String (Text)\",\n    required: \"Nein\"\n  }, {\n    colName: \"cad_id\",\n    colDesc: \"Interne Materialnummer aus CAD-System\",\n    colContent: \"String (Text)\",\n    required: \"Nein\"\n  }, {\n    colName: \"plast_desc\",\n    colDesc: 'Zugeordneter Kunststoff. Muss der Beschreibung in der Campus-Datenbank entsprechen (z.B. \"ACRYMID® TT50\").',\n    colContent: \"String (Text)\",\n    required: \"Nein\"\n  }, {\n    colName: \"height\",\n    colDesc: \"Höhe in mm\",\n    colContent: \"Float (Gleitkommazahl)\",\n    required: \"Nein\"\n  }, {\n    colName: \"width\",\n    colDesc: \"Breite in mm\",\n    colContent: \"Float (Gleitkommazahl)\",\n    required: \"Nein\"\n  }, {\n    colName: \"depth\",\n    colDesc: \"Tiefe in mm\",\n    colContent: \"Float (Gleitkommazahl)\",\n    required: \"Nein\"\n  }, {\n    colName: \"volume\",\n    colDesc: \"Volumen in mm^3\",\n    colContent: \"Float (Gleitkommazahl)\",\n    required: \"Nein\"\n  }]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    className: classes.buttons,\n    onClick: handleClickOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(PublishIcon, {\n    style: {\n      marginRight: 5\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 9\n    }\n  }), \"Upload\"), /*#__PURE__*/React.createElement(Dialog, {\n    open: csvUploadOpen,\n    onClose: handleClose,\n    \"aria-labelledby\": \"form-dialog-title\",\n    fullWidth: true,\n    maxWidth: \"md\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: \"100%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(DialogActions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(HighlightOffIcon, {\n    style: {\n      color: \"#005000\"\n    },\n    onClick: handleClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(DialogTitle, {\n    id: \"form-dialog-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 11\n    }\n  }, \"St\\xFCckliste uploaden\"), /*#__PURE__*/React.createElement(DialogContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 13\n    }\n  }, \"Bitte w\\xE4hlen Sie eine csv-Datei aus und achten Sie darauf, dass diese korrekt formatiert ist. Sie k\\xF6nnen auf \\\"Mehr anzeigen\\\" klicken, um Hilfe bei der Formatierung zu erhalten.\"), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    item: true,\n    xs: 12,\n    justify: \"center\",\n    style: {\n      marginTop: 30,\n      marginBottom: 30\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Accordion, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(AccordionSummary, {\n    expandIcon: /*#__PURE__*/React.createElement(ExpandMoreIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 31\n      }\n    }),\n    \"aria-controls\": \"panel1a-content\",\n    id: \"panel1a-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 19\n    }\n  }, \"Mehr anzeigen\")), /*#__PURE__*/React.createElement(AccordionDetails, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(GridDevExpress, {\n    rows: requiredData,\n    columns: exampleColumns,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    columnExtensions: tableColumnExtensions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(TableHeaderRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 21\n    }\n  }))))), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    item: true,\n    xs: 12,\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: \"100%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    accept: \".csv,.xlsx,.xls\",\n    onChange: handleFileUpload,\n    style: {\n      marginBottom: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 17\n    }\n  }))), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    item: true,\n    xs: 12,\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 13\n    }\n  }, loaded ? /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      marginTop: 20,\n      marginBottom: 20\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    style: {\n      fontWeight: \"bold\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 19\n    }\n  }, \"Vorschau\")) : /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      marginTop: 20,\n      marginBottom: 20\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    item: true,\n    xs: 12,\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: \"100%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(GridDevExpress, {\n    rows: data,\n    columns: columns,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(TableHeaderRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 19\n    }\n  })))), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    item: true,\n    xs: 12,\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 13\n    }\n  }, loaded ? /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      marginTop: 20\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: () => {\n      handleClose();\n    },\n    style: {\n      borderColor: \"#005000\",\n      color: \"#005000\",\n      textTransform: \"none\",\n      margin: 20,\n      height: 30,\n      width: 120\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 19\n    }\n  }, \"Upload\")) : /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      marginTop: 20\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: handleClose,\n    style: {\n      borderColor: \"#005000\",\n      color: \"#005000\",\n      textTransform: \"none\",\n      margin: 20,\n      height: 30,\n      width: 120\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 19\n    }\n  }, \"Abbrechen\")))))));\n};\n\nexport default CsvUploadDialog;","map":{"version":3,"sources":["/home/adrian/DIMOP/dimop_frontend/src/views/Main/CsvUploadDialog.jsx"],"names":["React","useContext","useState","XLSX","MainContext","Button","makeStyles","Dialog","DialogActions","DialogContent","DialogTitle","Grid","HighlightOffIcon","Typography","PublishIcon","GridDevExpress","Table","TableHeaderRow","Accordion","AccordionSummary","AccordionDetails","ExpandMoreIcon","useStyles","theme","root","margin","spacing","buttons","borderColor","color","textTransform","height","width","CsvUploadDialog","classes","csv_upload_open","csvUploadOpen","setCsvUploadOpen","loaded","setLoaded","handleClickOpen","handleClose","columns","setColumns","data","setData","processData","dataString","dataStringLines","split","headers","list","i","length","row","obj","j","d","substring","Object","values","filter","x","push","map","c","name","selector","handleFileUpload","e","file","target","files","reader","FileReader","onload","evt","bstr","result","wb","read","type","wsname","SheetNames","ws","Sheets","utils","sheet_to_csv","header","readAsBinaryString","exampleColumns","title","tableColumnExtensions","columnName","wordWrapEnabled","requiredData","setRequiredData","colName","colDesc","colContent","required","marginRight","marginTop","marginBottom","fontWeight"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useContext, useState } from \"react\";\nimport * as XLSX from \"xlsx\";\n\n//Components\nimport { MainContext } from \"./MainContext.jsx\";\n\n//Material UI\nimport Button from \"@material-ui/core/Button\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Grid from \"@material-ui/core/Grid\";\nimport HighlightOffIcon from \"@material-ui/icons/HighlightOff\";\nimport { Typography } from \"@material-ui/core\";\nimport PublishIcon from \"@material-ui/icons/Publish\";\nimport {\n  Grid as GridDevExpress,\n  Table,\n  TableHeaderRow,\n} from \"@devexpress/dx-react-grid-material-ui\";\nimport Accordion from \"@material-ui/core/Accordion\";\nimport AccordionSummary from \"@material-ui/core/AccordionSummary\";\nimport AccordionDetails from \"@material-ui/core/AccordionDetails\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\n\n// css theme\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n    },\n  },\n  buttons: {\n    borderColor: \"#005000\",\n    color: \"#005000\",\n    textTransform: \"none\",\n    margin: 20,\n    height: 30,\n    width: 120,\n  },\n}));\n\nconst CsvUploadDialog = () => {\n  const classes = useStyles();\n\n  const { csv_upload_open } = useContext(MainContext);\n  const [csvUploadOpen, setCsvUploadOpen] = csv_upload_open;\n  const [loaded, setLoaded] = useState(false);\n\n  const handleClickOpen = () => {\n    setCsvUploadOpen(true);\n  };\n\n  const handleClose = () => {\n    setCsvUploadOpen(false);\n  };\n\n  const [columns, setColumns] = useState([]);\n  const [data, setData] = useState([]);\n\n  // process CSV data\n  const processData = (dataString) => {\n    const dataStringLines = dataString.split(/\\r\\n|\\n/);\n    const headers = dataStringLines[0].split(\n      /,(?![^\"]*\"(?:(?:[^\"]*\"){2})*[^\"]*$)/\n    );\n\n    const list = [];\n    for (let i = 1; i < dataStringLines.length; i++) {\n      const row = dataStringLines[i].split(\n        /,(?![^\"]*\"(?:(?:[^\"]*\"){2})*[^\"]*$)/\n      );\n      if (headers && row.length == headers.length) {\n        const obj = {};\n        for (let j = 0; j < headers.length; j++) {\n          let d = row[j];\n          if (d.length > 0) {\n            if (d[0] == '\"') d = d.substring(1, d.length - 1);\n            if (d[d.length - 1] == '\"') d = d.substring(d.length - 2, 1);\n          }\n          if (headers[j]) {\n            obj[headers[j]] = d;\n          }\n        }\n\n        // remove the blank rows\n        if (Object.values(obj).filter((x) => x).length > 0) {\n          list.push(obj);\n        }\n      }\n    }\n\n    // prepare columns list from headers\n    const columns = headers.map((c) => ({\n      name: c,\n      selector: c,\n    }));\n\n    setData(list);\n    setColumns(columns);\n    setLoaded(true);\n  };\n\n  // handle file upload\n  const handleFileUpload = (e) => {\n    const file = e.target.files[0];\n    const reader = new FileReader();\n    reader.onload = (evt) => {\n      /* Parse data */\n      const bstr = evt.target.result;\n      const wb = XLSX.read(bstr, { type: \"binary\" });\n      /* Get first worksheet */\n      const wsname = wb.SheetNames[0];\n      const ws = wb.Sheets[wsname];\n      /* Convert array of arrays */\n      const data = XLSX.utils.sheet_to_csv(ws, { header: 1 });\n      processData(data);\n    };\n    reader.readAsBinaryString(file);\n  };\n\n  const [exampleColumns] = useState([\n    { name: \"colName\", title: \"Spaltenbezeichnung\" },\n    { name: \"colDesc\", title: \"Spaltenbeschreibung\" },\n    { name: \"colContent\", title: \"Spalteninhalt\" },\n    { name: \"required\", title: \"Erforderlich\" },\n  ]);\n\n  const [tableColumnExtensions] = useState([\n    { columnName: \"colName\", width: 150 },\n    { columnName: \"colDesc\", width: 400, wordWrapEnabled: true },\n    { columnName: \"colContent\", width: 150 },\n    { columnName: \"required\", width: 100 },\n  ]);\n\n  const [requiredData, setRequiredData] = useState([\n    {\n      colName: \"id\",\n      colDesc: \"Identifikation eine Komponente innerhalb der Stückliste\",\n      colContent: \"Integer (Ganzzahl)\",\n      required: \"Ja\",\n    },\n    {\n      colName: \"parent_id\",\n      colDesc: \"Zuordnung der Parentkomponente (deren id)\",\n      colContent: \"Integer (Ganzzahl)\",\n      required: \"Ja\",\n    },\n    {\n      colName: \"mat_desc\",\n      colDesc: \"Bezeichnung des Materials\",\n      colContent: \"String (Text)\",\n      required: \"Ja\",\n    },\n    {\n      colName: \"is_atomic\",\n      colDesc:\n        \"Handelt es sich um eine Komponente der untersten Stufe? Falls ja, kann der Kompente ein Kunststoff zugeordnet werden. Falls nicht, können weitere Komponenten zugeordnet werden.\",\n      colContent: \"1 (Ja) oder 0 (Nein)\",\n      required: \"Ja\",\n    },\n    {\n      colName: \"weight\",\n      colDesc: \"Gewicht in g\",\n      colContent: \"Float (Gleitkommazahl)\",\n      required: \"Ja\",\n    },\n    {\n      colName: \"mat_rw\",\n      colDesc: \"Recycling-/Verträglichkeitswert\",\n      colContent: \"Float (Gleitkommazahl)\",\n      required: \"Nein\",\n    },\n    {\n      colName: \"mat_id_int\",\n      colDesc: \"Interne Materialnummer (z.B. aus ERP-System)\",\n      colContent: \"String (Text)\",\n      required: \"Nein\",\n    },\n    {\n      colName: \"cad_id\",\n      colDesc: \"Interne Materialnummer aus CAD-System\",\n      colContent: \"String (Text)\",\n      required: \"Nein\",\n    },\n    {\n      colName: \"plast_desc\",\n      colDesc:\n        'Zugeordneter Kunststoff. Muss der Beschreibung in der Campus-Datenbank entsprechen (z.B. \"ACRYMID® TT50\").',\n      colContent: \"String (Text)\",\n      required: \"Nein\",\n    },\n    {\n      colName: \"height\",\n      colDesc: \"Höhe in mm\",\n      colContent: \"Float (Gleitkommazahl)\",\n      required: \"Nein\",\n    },\n    {\n      colName: \"width\",\n      colDesc: \"Breite in mm\",\n      colContent: \"Float (Gleitkommazahl)\",\n      required: \"Nein\",\n    },\n    {\n      colName: \"depth\",\n      colDesc: \"Tiefe in mm\",\n      colContent: \"Float (Gleitkommazahl)\",\n      required: \"Nein\",\n    },\n    {\n      colName: \"volume\",\n      colDesc: \"Volumen in mm^3\",\n      colContent: \"Float (Gleitkommazahl)\",\n      required: \"Nein\",\n    },\n  ]);\n\n  return (\n    <div>\n      <Button className={classes.buttons} onClick={handleClickOpen}>\n        <PublishIcon style={{ marginRight: 5 }}></PublishIcon>\n        Upload\n      </Button>\n      <Dialog\n        open={csvUploadOpen}\n        onClose={handleClose}\n        aria-labelledby=\"form-dialog-title\"\n        fullWidth={true}\n        maxWidth={\"md\"}\n      >\n        <div style={{ width: \"100%\" }}>\n          <DialogActions>\n            <HighlightOffIcon\n              style={{ color: \"#005000\" }}\n              onClick={handleClose}\n            ></HighlightOffIcon>\n          </DialogActions>\n          <DialogTitle id=\"form-dialog-title\">Stückliste uploaden</DialogTitle>\n          <DialogContent>\n            <Typography>\n              Bitte wählen Sie eine csv-Datei aus und achten Sie darauf, dass\n              diese korrekt formatiert ist. Sie können auf \"Mehr anzeigen\"\n              klicken, um Hilfe bei der Formatierung zu erhalten.\n            </Typography>\n\n            <Grid\n              container\n              item\n              xs={12}\n              justify=\"center\"\n              style={{ marginTop: 30, marginBottom: 30 }}\n            >\n              <Accordion>\n                <AccordionSummary\n                  expandIcon={<ExpandMoreIcon />}\n                  aria-controls=\"panel1a-content\"\n                  id=\"panel1a-header\"\n                >\n                  <Typography>Mehr anzeigen</Typography>\n                </AccordionSummary>\n                <AccordionDetails>\n                  <GridDevExpress rows={requiredData} columns={exampleColumns}>\n                    <Table columnExtensions={tableColumnExtensions} />\n                    <TableHeaderRow />\n                  </GridDevExpress>\n                </AccordionDetails>\n              </Accordion>\n            </Grid>\n\n            <Grid container item xs={12} justify=\"center\">\n              <div style={{ width: \"100%\" }}>\n                <input\n                  type=\"file\"\n                  accept=\".csv,.xlsx,.xls\"\n                  onChange={handleFileUpload}\n                  style={{ marginBottom: 10 }}\n                />\n              </div>\n            </Grid>\n\n            <Grid container item xs={12} justify=\"center\">\n              {loaded ? (\n                <div style={{ marginTop: 20, marginBottom: 20 }}>\n                  <Typography style={{ fontWeight: \"bold\" }}>\n                    Vorschau\n                  </Typography>\n                </div>\n              ) : (\n                <div style={{ marginTop: 20, marginBottom: 20 }} />\n              )}\n            </Grid>\n\n            <Grid container item xs={12} justify=\"center\">\n              <div style={{ width: \"100%\" }}>\n                <GridDevExpress rows={data} columns={columns}>\n                  <Table />\n                  <TableHeaderRow />\n                </GridDevExpress>\n              </div>\n            </Grid>\n\n            <Grid container item xs={12} justify=\"center\">\n              {loaded ? (\n                <div style={{ marginTop: 20 }}>\n                  <Button\n                    onClick={() => {\n                      handleClose();\n                    }}\n                    style={{\n                      borderColor: \"#005000\",\n                      color: \"#005000\",\n                      textTransform: \"none\",\n                      margin: 20,\n                      height: 30,\n                      width: 120,\n                    }}\n                  >\n                    Upload\n                  </Button>\n                </div>\n              ) : (\n                <div style={{ marginTop: 20 }}>\n                  <Button\n                    onClick={handleClose}\n                    style={{\n                      borderColor: \"#005000\",\n                      color: \"#005000\",\n                      textTransform: \"none\",\n                      margin: 20,\n                      height: 30,\n                      width: 120,\n                    }}\n                  >\n                    Abbrechen\n                  </Button>\n                </div>\n              )}\n            </Grid>\n          </DialogContent>\n        </div>\n      </Dialog>\n    </div>\n  );\n};\nexport default CsvUploadDialog;\n"]},"metadata":{},"sourceType":"module"}