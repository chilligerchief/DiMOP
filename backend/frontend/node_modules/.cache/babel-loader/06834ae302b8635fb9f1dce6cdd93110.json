{"ast":null,"code":"var _jsxFileName = \"/home/adrian/DIMOP/dimop_frontend/src/views/Construction/Construction.jsx\";\nimport React, { useContext, useState, useEffect, Fragment } from \"react\";\nimport { Button, CircularProgress, Grid, Step, StepLabel, Stepper, Table, TableBody, TableCell, TableHead, TableRow, Typography } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport NavBar from \"../../components/NavBar/NavBar\";\nimport ConstructionLoad from \"./ConstructionLoad\";\nimport variants from \"../../files/constructionVariantsById.json\";\nimport { DataTable } from \"../../components/DataTable/DataTable\"; // css theme || use classes.NAME\n\nconst useStyles = makeStyles(theme => ({})); // build construction view\n\nexport default function Construction() {\n  // standard import for using styles\n  const classes = useStyles(); // const theme = useTheme();\n\n  const [constructionLoadedId, setConstructionLoadedId] = useState(null);\n  const [loadDialogOpen, setLoadDialogOpen] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  useEffect(() => {\n    //fetch data\n    // fetch(\"constructionById/constructionLoadedId\").then(res => res.json()).then(res => {\n    //     setData(res)\n    //     setLoading(false)\n    // })\n    console.log(\"use effect\");\n  }, [constructionLoadedId]); // get managed states from context\n  // const {\n  //     open_load_cons,\n  //     content_num,\n  // } = useContext(ConstructionContext);\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(NavBar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 21\n    }\n  }))), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 3,\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Stepper, {\n    activeStep: \"1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Step, {\n    key: \"1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(StepLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 29\n    }\n  }, \"Konstruktion laden\")), /*#__PURE__*/React.createElement(Step, {\n    key: \"2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(StepLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 29\n    }\n  }, \"Varianten vergleichen\"))))), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 3,\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 17\n    }\n  }, constructionLoadedId ? /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 25\n    }\n  }, isLoading ? /*#__PURE__*/React.createElement(CircularProgress, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 33\n    }\n  }) : /*#__PURE__*/React.createElement(DataTable, {\n    data: variants.data,\n    columns: variants.columns,\n    rowClick: () => console.log(\"asd\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 33\n    }\n  })) : /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h1\",\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 29\n    }\n  }, \"Laden Sie eine Konstruktion\"), /*#__PURE__*/React.createElement(Button, {\n    onClick: () => setLoadDialogOpen(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 29\n    }\n  }, \"Konstruktion ausw\\xE4hlen\")))), /*#__PURE__*/React.createElement(ConstructionLoad, {\n    open: loadDialogOpen,\n    setOpen: setLoadDialogOpen,\n    setConstructionLoadedId: setConstructionLoadedId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }\n  }));\n}","map":{"version":3,"sources":["/home/adrian/DIMOP/dimop_frontend/src/views/Construction/Construction.jsx"],"names":["React","useContext","useState","useEffect","Fragment","Button","CircularProgress","Grid","Step","StepLabel","Stepper","Table","TableBody","TableCell","TableHead","TableRow","Typography","makeStyles","NavBar","ConstructionLoad","variants","DataTable","useStyles","theme","Construction","classes","constructionLoadedId","setConstructionLoadedId","loadDialogOpen","setLoadDialogOpen","isLoading","setIsLoading","console","log","data","columns"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect, Fragment } from \"react\";\n\nimport {\n    Button,\n    CircularProgress,\n    Grid,\n    Step,\n    StepLabel,\n    Stepper,\n    Table,\n    TableBody,\n    TableCell,\n    TableHead,\n    TableRow,\n    Typography,\n} from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport NavBar from \"../../components/NavBar/NavBar\";\n\nimport ConstructionLoad from \"./ConstructionLoad\";\nimport variants from \"../../files/constructionVariantsById.json\";\nimport { DataTable } from \"../../components/DataTable/DataTable\";\n\n// css theme || use classes.NAME\nconst useStyles = makeStyles((theme) => ({}));\n\n// build construction view\nexport default function Construction() {\n    // standard import for using styles\n    const classes = useStyles();\n    // const theme = useTheme();\n\n    const [constructionLoadedId, setConstructionLoadedId] = useState(null);\n    const [loadDialogOpen, setLoadDialogOpen] = useState(false);\n    const [isLoading, setIsLoading] = useState(false);\n\n    useEffect(() => {\n        //fetch data\n        // fetch(\"constructionById/constructionLoadedId\").then(res => res.json()).then(res => {\n        //     setData(res)\n        //     setLoading(false)\n        // })\n        console.log(\"use effect\");\n    }, [constructionLoadedId]);\n\n    // get managed states from context\n    // const {\n    //     open_load_cons,\n    //     content_num,\n    // } = useContext(ConstructionContext);\n\n    return (\n        <div>\n            <Grid container spacing={3}>\n                <Grid item xs={12}>\n                    <NavBar></NavBar>\n                </Grid>\n            </Grid>\n\n            <Grid container spacing={3} justify=\"center\">\n                <Grid item>\n                    <Stepper activeStep=\"1\">\n                        <Step key=\"1\">\n                            <StepLabel>Konstruktion laden</StepLabel>\n                        </Step>\n                        <Step key=\"2\">\n                            <StepLabel>Varianten vergleichen</StepLabel>\n                        </Step>\n                    </Stepper>\n                </Grid>\n            </Grid>\n            <Grid container spacing={3} justify=\"center\">\n                <Grid item>\n                    {constructionLoadedId ? (\n                        <Fragment>\n                            {isLoading ? (\n                                <CircularProgress />\n                            ) : (\n                                <DataTable\n                                    data={variants.data}\n                                    columns={variants.columns}\n                                    rowClick={() => console.log(\"asd\")}\n                                />\n                            )}\n                        </Fragment>\n                    ) : (\n                        <Fragment>\n                            <Typography variant=\"h1\" align=\"center\">\n                                Laden Sie eine Konstruktion\n                            </Typography>\n                            <Button onClick={() => setLoadDialogOpen(true)}>\n                                Konstruktion auswählen\n                            </Button>\n                        </Fragment>\n                    )}\n                </Grid>\n            </Grid>\n\n            {/* Dialogs */}\n            <ConstructionLoad\n                open={loadDialogOpen}\n                setOpen={setLoadDialogOpen}\n                setConstructionLoadedId={setConstructionLoadedId}\n            />\n        </div>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}